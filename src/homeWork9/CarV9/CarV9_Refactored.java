package homeWork9.CarV9;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.StringJoiner;

/**
 * This class is an example of Consumer Driven Development. All fields and methods are only needed for
 * class realization. Start data for fields tankCapacity, fuelConsumption, fuelInTank generated by Math.random() method.
 * Field location used once for displaying state on start.
 * Used only one setter for field tripDistance for setting tripDistance to zero.
 * Used only one getter for field fuelInTank for getting data from field.
 * The constructor doesn't need, because the CarV9 member was created using the default constructor.
 *
 * Used BigDecimal instead of double for better financial calculating.
 * Improved printTripReport() method for more attractive and user-friendly displaying results of the trip.
 */
public class CarV9_Refactored {
    // Constants for using colors
    public static final String BLACK_WHITE_BG = "\033[0;30;47m";
    public static final String LIGHT_BLUE_BOLD_ITALIC = "\033[1;3;34;5m";
    public static final String RESET = "\033[0m";

    private BigDecimal tankCapacity = BigDecimal.valueOf(Math.random() * 31 + 30)
            .setScale(2, RoundingMode.CEILING);
    private BigDecimal fuelConsumption = BigDecimal.valueOf(Math.random() * 11 + 5)
            .setScale(2, RoundingMode.CEILING);
    private BigDecimal fuelInTank = tankCapacity
            .divide(BigDecimal.valueOf(100.0), RoundingMode.CEILING)
            .multiply(BigDecimal.valueOf(Math.random() * 41 + 10))
            .setScale(2, RoundingMode.CEILING);
    private double tripDistance;
    private BigDecimal tripMoneySpent = new BigDecimal(0)
            .setScale(2, RoundingMode.CEILING);
    private String location = "Одесса";

    public void setTripDistance(double tripDistance) {
        this.tripDistance = tripDistance;
    }

    public BigDecimal getFuelInTank() {
        return fuelInTank;
    }

    /**
     * Fills the tank using user data. If the amount of fuel is greater
     * than the space in the tank, fill the required amount.
     *
     * @param liters Fuel quantity amount getting from user by Scanner
     * @param fuelPrice Fuel price getting from user by Scanner
     */
    public void fillTank(double liters, double fuelPrice) {
        BigDecimal price = new BigDecimal(fuelPrice);
        BigDecimal litersValue = new BigDecimal(liters);
        BigDecimal fuelToFullTank = tankCapacity.subtract(fuelInTank);
        if (litersValue.compareTo(fuelToFullTank) == 1) {
            litersValue = fuelToFullTank;
        }
        fuelInTank = fuelInTank.add(litersValue);
        System.out.printf("Заправлено %.1f литров. Оплачено %.2f грн.\n", litersValue, litersValue.multiply(price));
        tripMoneySpent = tripMoneySpent.add(price.multiply(litersValue));
    }

    /**
     * Fills full tank using fillTank() method.
     *
     * @param fuelPrice Fuel price getting from user by Scanner
     */
    public void fillFullTank(double fuelPrice) {
        System.out.println("Заправляем полный бак.");
        fillTank(tankCapacity.subtract(fuelInTank).doubleValue(), fuelPrice);
    }

    /**
     * Driving imitation. Calculates fuel, that was used for trip to destination point.
     *
     * @param distance The trip distance in kilometers, int value.
     * @param destination The name of destination point.
     * @throws RuntimeException If the fuel in the tank doesn't enough for trip.
     */
    public void drive(int distance, String destination) throws RuntimeException {
        System.out.printf("Едем в %s. %s км ...\n", destination, distance);
        fuelInTank = fuelInTank
                .subtract(BigDecimal.valueOf(distance)
                        .divide(BigDecimal.valueOf(100.0), RoundingMode.CEILING)
                        .multiply(fuelConsumption));
        if (fuelInTank.compareTo(BigDecimal.valueOf(0)) == -1) {
            throw new RuntimeException("Приехали... БЕНЗИН ЗАКОНЧИЛСЯ!");
        }
        tripDistance += distance;
    }

    /**
     * Printing report about the trip. Display fuel in tank amount,
     * trip distance and how much spent fuel costs.
     */
    public void printTripReport() {
        System.out.println("\nВаш отчет, пожалуйста: \n");
        System.out.println(BLACK_WHITE_BG + "╭────────────────────────────────────────────────────────────╮" + RESET);
        System.out.println(BLACK_WHITE_BG + "│       -------------- ОТЧЕТ О ПОЕЗДКЕ ----------------      │" + RESET);
        System.out.println(BLACK_WHITE_BG + "│                                                            │" + RESET);
        System.out.printf("%s│  - Остаток топлива в баке: .................%7.2f л. \t │%s\n", BLACK_WHITE_BG, getFuelInTank(), RESET);
        System.out.println(BLACK_WHITE_BG + "│                                                            │" + RESET);
        System.out.printf("%s│  - Расстояние: ............................%7.2f км. \t │%s\n", BLACK_WHITE_BG, tripDistance, RESET);
        System.out.println(BLACK_WHITE_BG + "│                                                            │" + RESET);
        System.out.printf("%s│  - Затраты на топливо: ...................%9.2f ₴. \t │%s\n", BLACK_WHITE_BG, tripMoneySpent.setScale(2, RoundingMode.CEILING), RESET);
        System.out.println(BLACK_WHITE_BG + "│                                                            │" + RESET);
        System.out.println(BLACK_WHITE_BG + "│   ------------------------------------------------------   │" + RESET);
        System.out.println(BLACK_WHITE_BG + "│                     -- CAR RENTAL --                       │" + RESET);
        System.out.printf("%s│          %10s                         %5s          │%s\n",
                BLACK_WHITE_BG,
                DateTimeFormatter.ofPattern("dd.MM.yyyy").format(LocalDate.now()),
                DateTimeFormatter.ofPattern("HH:mm").format(LocalTime.now()), RESET);
        System.out.println(BLACK_WHITE_BG + "╰────────────────────────────────────────────────────────────╯" + RESET);

    }

    /**
     * Overriding toString() for displaying CarV9 member info.
     *
     * @return Info with data about car.
     */
    @Override
    public String toString() {
        return new StringJoiner(", ", CarV9_Refactored.class.getSimpleName() + "[", "]")
                .add("tripDistance = " + LIGHT_BLUE_BOLD_ITALIC + tripDistance + RESET)
                .add("tripMoneySpent = " + LIGHT_BLUE_BOLD_ITALIC + tripMoneySpent.setScale(2, RoundingMode.CEILING) + RESET)
                .add("fuelInTank = " + LIGHT_BLUE_BOLD_ITALIC + fuelInTank + RESET)
                .add("tankCapacity = " + LIGHT_BLUE_BOLD_ITALIC + tankCapacity + RESET)
                .add("fuelConsumption = " + LIGHT_BLUE_BOLD_ITALIC + fuelConsumption + RESET)
                .add("location = " + LIGHT_BLUE_BOLD_ITALIC + location + RESET)
                .toString();
    }
}
